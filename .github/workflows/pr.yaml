#
# Copyright (c) 2020 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
name: PR
# Trigger the workflow on push
on:
  pull_request:
    branches: [master]
jobs:
  docker-build:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    env:
      DIR_DASHBOARD: che-dashboard
      DIR_CHE: che
      IMAGE_VERSION: che-dashboard-pull-${{ github.event.pull_request.number }}
      ORGANIZATION: docker.io/maxura
      # IMAGE_DASHBOARD: docker.io/maxura/che-dashboard:che-dashboard-pull-${{ github.event.pull_request.number }}
      # IMAGE_CHE: docker.io/maxura/che-server:che-dashboard-pull-${{ github.event.pull_request.number }}
    steps:

      - name: Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # - name: "Docker prepare"
      #   run: docker image prune -a -f

      # - name: "Docker docker.io Login"
      #   run: docker login -u "${{ secrets.DOCKERHUB_MAXURA_USERNAME }}" -p "${{ secrets.DOCKERHUB_MAXURA_PASSWORD }}" docker.io

      # - name: 'che-dashboard: Docker Buildx (build)'
      #   uses: nick-invision/retry@v1
      #   env:
      #     IMAGE_DASHBOARD: ${{ env.ORGANIZATION }}/che-dashboard:${{ env.IMAGE_VERSION }}
      #   with:
      #     timeout_minutes: 100
      #     max_attempts: 5
      #     retry_wait_seconds: 60
      #     command: |
      #       docker buildx build --cache-from "type=local,src=/tmp/.buildx-cache" --cache-to "type=local,dest=/tmp/.buildx-cache" --platform linux/amd64,linux/s390x --output "type=image,push=false" --tag $IMAGE_DASHBOARD --file apache.Dockerfile .


      - name: 'che: checkout source code'
        uses: actions/checkout@v2
        with:
          repository: 'eclipse/che'
          ref: master
          path: ${{ env.DIR_CHE }}

      - name: 'che: Set up JDK 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 'che: Maven build'
        run: |
          echo ${GITHUB_WORKSPACE}/${DIR_CHE} && cd ${GITHUB_WORKSPACE}/${DIR_CHE} && mvn clean install -DskipTests

      - name: 'che-server: Docker Build (build)'
        uses: nick-invision/retry@v1
        env:
          CHE_VERSION: next
          BUILD_COMMAND: bash ${{ env.GITHUB_WORKSPACE }}/${{ env.DIR_CHE }}/dockerfiles/che/build.sh --skip-tests --tag:${{ env.IMAGE_VERSION }} --organization:${{ env.ORGANIZATION }} --build-arg:"CHE_DASHBOARD_VERSION=${{ env.IMAGE_VERSION }},CHE_DASHBOARD_ORGANIZATION=${{ env.ORGANIZATION }},CHE_WORKSPACE_LOADER_VERSION=${{ env.CHE_VERSION }}"
        with:
          timeout_minutes: 100
          max_attempts: 5
          retry_wait_seconds: 60
          command: |
            echo "command is ${BUILD_COMMAND}" && bash ${GITHUB_WORKSPACE}/${DIR_CHE}/dockerfiles/che/build.sh --skip-tests --tag:${IMAGE_VERSION} --organization:${ORGANIZATION} --build-arg:"CHE_DASHBOARD_VERSION=${IMAGE_VERSION},CHE_DASHBOARD_ORGANIZATION=${ORGANIZATION},CHE_WORKSPACE_LOADER_VERSION=${CHE_VERSION}"
        # && bash $GITHUB_WORKSPACE/$DIR_CHE/dockerfiles/che/build.sh --tag:${IMAGE_VERSION} --build-arg:"CHE_DASHBOARD_VERSION=${IMAGE_VERSION},CHE_DASHBOARD_ORGANIZATION='${ORGANIZATION}',CHE_WORKSPACE_LOADER_VERSION=${CHE_VERSION}"

      # - name: "Comment with image name"
      #   if: ${{ success() }}
      #   uses: actions/github-script@v3
      #   env:
      #     CHE_VERSION: next
      #     IMAGE_CHE: ${ORGANIZATION}/che-server:${IMAGE_VERSION}
      #   with:
      #     script: |
      #       const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
      #       const imageFull = "${{env.IMAGE_CHE}}";
      #       github.issues.createComment({ issue_number, owner, repo, body: 'Docker image build succeeded: ' + imageFull });

      # - name: "Docker Logout"
      #   run: docker logout
